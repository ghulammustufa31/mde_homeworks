/*
 * generated by Xtext 2.25.0
 */
package it.disim.univaq.ecommerce.xtext.serializer;

import com.google.inject.Inject;
import it.disim.univaq.ecommerce.xtext.services.EcommerceGrammarAccess;
import java.util.Set;
import model.Address;
import model.Administrator;
import model.Cart;
import model.Category;
import model.Customer;
import model.EcommerceSystem;
import model.Invoice;
import model.ItemCart;
import model.ModelPackage;
import model.Order;
import model.Product;
import model.ProductImage;
import model.Shipment;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EcommerceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EcommerceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.ADDRESS:
				sequence_Address(context, (Address) semanticObject); 
				return; 
			case ModelPackage.ADMINISTRATOR:
				sequence_Administrator(context, (Administrator) semanticObject); 
				return; 
			case ModelPackage.CART:
				sequence_Cart(context, (Cart) semanticObject); 
				return; 
			case ModelPackage.CATEGORY:
				sequence_Category(context, (Category) semanticObject); 
				return; 
			case ModelPackage.CUSTOMER:
				sequence_Customer(context, (Customer) semanticObject); 
				return; 
			case ModelPackage.ECOMMERCE_SYSTEM:
				sequence_EcommerceSystem(context, (EcommerceSystem) semanticObject); 
				return; 
			case ModelPackage.INVOICE:
				sequence_Invoice(context, (Invoice) semanticObject); 
				return; 
			case ModelPackage.ITEM_CART:
				sequence_ItemCart(context, (ItemCart) semanticObject); 
				return; 
			case ModelPackage.ORDER:
				sequence_Order(context, (Order) semanticObject); 
				return; 
			case ModelPackage.PRODUCT:
				sequence_Product(context, (Product) semanticObject); 
				return; 
			case ModelPackage.PRODUCT_IMAGE:
				sequence_ProductImage(context, (ProductImage) semanticObject); 
				return; 
			case ModelPackage.SHIPMENT:
				sequence_Shipment(context, (Shipment) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Address returns Address
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         active=EBoolean 
	 *         country=EString? 
	 *         state=EString? 
	 *         city=EString? 
	 *         post_code=EString? 
	 *         phone=EString? 
	 *         street_address=EString?
	 *     )
	 */
	protected void sequence_Address(ISerializationContext context, Address semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Administrator returns Administrator
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         active=EBoolean 
	 *         surname=EString? 
	 *         username=EString? 
	 *         password=EString? 
	 *         email=EString?
	 *     )
	 */
	protected void sequence_Administrator(ISerializationContext context, Administrator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Cart returns Cart
	 *
	 * Constraint:
	 *     (name=EString date_added=EDate? (cart_have_items+=ItemCart cart_have_items+=ItemCart*)?)
	 */
	protected void sequence_Cart(ISerializationContext context, Cart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Category returns Category
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         active=EBoolean 
	 *         root_cat=EBoolean 
	 *         (have_sub_categories+=Category have_sub_categories+=Category*)? 
	 *         (have_products+=Product have_products+=Product*)?
	 *     )
	 */
	protected void sequence_Category(ISerializationContext context, Category semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Customer returns Customer
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         active=EBoolean 
	 *         surname=EString? 
	 *         username=EString? 
	 *         password=EString? 
	 *         email=EString? 
	 *         customer_have_address+=Address 
	 *         customer_have_address+=Address* 
	 *         customer_have_cart=Cart?
	 *     )
	 */
	protected void sequence_Customer(ISerializationContext context, Customer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EcommerceSystem returns EcommerceSystem
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (shop_have_categories+=Category shop_have_categories+=Category*)? 
	 *         (have_clients+=Customer have_clients+=Customer*)? 
	 *         (shop_have_administrators+=Administrator shop_have_administrators+=Administrator*)?
	 *     )
	 */
	protected void sequence_EcommerceSystem(ISerializationContext context, EcommerceSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Invoice returns Invoice
	 *
	 * Constraint:
	 *     (name=EString invoice_id=EInt date=EDate?)
	 */
	protected void sequence_Invoice(ISerializationContext context, Invoice semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemCart returns ItemCart
	 *
	 * Constraint:
	 *     (name=EString quantity=EInt item_cart_have_product=[Product|EString])
	 */
	protected void sequence_ItemCart(ISerializationContext context, ItemCart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.NAMED__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.NAMED__NAME));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ITEM_CART__QUANTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ITEM_CART__QUANTITY));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.ITEM_CART__ITEM_CART_HAVE_PRODUCT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.ITEM_CART__ITEM_CART_HAVE_PRODUCT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemCartAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getItemCartAccess().getQuantityEIntParserRuleCall_3_1_0(), semanticObject.getQuantity());
		feeder.accept(grammarAccess.getItemCartAccess().getItem_cart_have_productProductEStringParserRuleCall_4_1_0_1(), semanticObject.eGet(ModelPackage.Literals.ITEM_CART__ITEM_CART_HAVE_PRODUCT, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Order returns Order
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             reference_number=EString? 
	 *             date_created=EDate? 
	 *             order_state=OrderState 
	 *             order_has_invoice=Invoice 
	 *             (order_have_shipment+=Shipment order_have_shipment+=Shipment*)?
	 *         ) | 
	 *         (reference_number=EString? order_has_invoice=Invoice) | 
	 *         (reference_number=EString? date_created=EDate? order_has_invoice=Invoice) | 
	 *         (
	 *             (
	 *                 (reference_number=EString? order_has_invoice=Invoice) | 
	 *                 (reference_number=EString? date_created=EDate? order_has_invoice=Invoice) | 
	 *                 order_has_invoice=Invoice
	 *             ) 
	 *             (order_have_shipment+=Shipment order_have_shipment+=Shipment*)?
	 *         ) | 
	 *         order_has_invoice=Invoice
	 *     )?
	 */
	protected void sequence_Order(ISerializationContext context, Order semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProductImage returns ProductImage
	 *
	 * Constraint:
	 *     ref=EString
	 */
	protected void sequence_ProductImage(ISerializationContext context, ProductImage semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.PRODUCT_IMAGE__REF) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.PRODUCT_IMAGE__REF));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProductImageAccess().getRefEStringParserRuleCall_2_1_0(), semanticObject.getRef());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Product returns Product
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         available=EBoolean 
	 *         stock=EInt 
	 *         height=EFloat 
	 *         weight=EFloat 
	 *         price=EFloat 
	 *         description=EString? 
	 *         (product_have_images+=ProductImage product_have_images+=ProductImage*)?
	 *     )
	 */
	protected void sequence_Product(ISerializationContext context, Product semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Shipment returns Shipment
	 *
	 * Constraint:
	 *     (name=EString shipment_status=ShipmentStatus? date=EDate? shipment_no=EString? shipment_has_address=[Address|EString])
	 */
	protected void sequence_Shipment(ISerializationContext context, Shipment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
