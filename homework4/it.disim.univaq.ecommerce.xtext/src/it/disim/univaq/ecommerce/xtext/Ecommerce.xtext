// automatically generated by Xtext
grammar it.disim.univaq.ecommerce.xtext.Ecommerce with org.eclipse.xtext.common.Terminals

//import "http://it.disim.univaq.ecommerce/model" 
import "platform:/resource/XtextMaterial/model/model.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

EcommerceSystem returns EcommerceSystem:
	'EcommerceSystem'
	name=EString
	'{'
		('categories' '[' shop_have_categories+=Category ( "," shop_have_categories+=Category)* ']' )?
		('customers' '[' have_clients+=Customer ( "," have_clients+=Customer)* ']' )?
		('administrators' '[' shop_have_administrators+=Administrator ( "," shop_have_administrators+=Administrator)* ']' )? 
	'}';

EString returns ecore::EString:
	STRING | ID;

Category returns Category:
	'Category'
	name=EString
	'{'
		('active:' active=EBoolean)
		('root_cat:' root_cat=EBoolean)
		('sub_categories' '[' have_sub_categories+=Category ( "," have_sub_categories+=Category)* ']' )?
		('products' '[' have_products+=Product ( "," have_products+=Product)* ']' )?
	'}';

Customer returns Customer:
	'Customer'
	name=EString
	'{'
		('active:' active=EBoolean)
		('surname:' surname=EString)?
		('username:' username=EString)?
		('password:' password=EString)?
		('email:' email=EString)?
		('address' '{' customer_have_address+=Address ( "," customer_have_address+=Address)* '}' )
		('cart' '{' customer_have_cart=Cart '}')?
	'}';

Administrator returns Administrator:
	'Administrator'
	name=EString
	'{'
		('active:' active=EBoolean)
		('surname:' surname=EString)?
		('username:' username=EString)?
		('password:' password=EString)?
		('email:' email=EString)?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Product returns Product:
	'Product'
	name=EString
	'{'
		('available:' available=EBoolean)
		('stock:' stock=EInt)
		('height:' height=EFloat)
		('weight:' weight=EFloat)
		('price:' price=EFloat)
		('description:' description=EString)?
		('images' '[' product_have_images+=ProductImage ( "," product_have_images+=ProductImage)* ']' )?
	'}';

EInt returns ecore::EInt:
	'-'? INT;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

ProductImage returns ProductImage:
	'ProductImage'
	'{'
		('ref' ref=EString)?
	'}';

Address returns Address:
	'Address'
	name=EString
	'{'
		('active:' active=EBoolean)
		('country:' country=EString)?
		('state:' state=EString)?
		('city:' city=EString)?
		('post_code:' post_code=EString)?
		('phone:' phone=EString)?
		('street_address:' street_address=EString)?
	'}';

Cart returns Cart:
	'Cart'
	name=EString
	'{'
		('date_added:' date_added=EDate)?
		('cart_items:' '{' cart_have_items+=ItemCart ( "," cart_have_items+=ItemCart)* '}' )?
//		('cart_order:' cart_have_order=Order)?
	'}';

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

ItemCart returns ItemCart:
	'ItemCart'
	name=EString
	'{'
		('quantity' quantity=EInt)
		('product' item_cart_have_product=[Product|EString])
	'}';

Order returns Order:
	'Order'
	'{'
		('reference_number:' reference_number=EString)?
		('date_created:' date_created=EDate)?
		('order_state:' order_state=OrderState)?
//		('order_for_cart:' order_for_cart=[Cart|EString])
		('invoice:' order_has_invoice=Invoice)?
		('shipments:' '[' order_have_shipment+=Shipment ( "," order_have_shipment+=Shipment)* ']' )?
	'}';

enum OrderState returns OrderState:
				PAID = 'PAID' | COMMITTED = 'COMMITTED' | UNPAID = 'UNPAID';

Invoice returns Invoice:
	'Invoice'
	name=EString
	'{'
		('invoice_id:' invoice_id=EInt)
		('date:' date=EDate)?
//		('invoice_for_order:' invoice_for_order=[Order|EString])
	'}';

Shipment returns Shipment:
	'Shipment'
	name=EString
	'{'
		('shipment_status:' shipment_status=ShipmentStatus)?
		('date:' date=EDate)?
		('shipment_no:' shipment_no=EString)?
		('shipment_address:' shipment_has_address=[Address|EString])
	'}';

enum ShipmentStatus returns ShipmentStatus:
				PENDING = 'PENDING' | TRAVELING = 'TRAVELING' | DELIVERED = 'DELIVERED';
