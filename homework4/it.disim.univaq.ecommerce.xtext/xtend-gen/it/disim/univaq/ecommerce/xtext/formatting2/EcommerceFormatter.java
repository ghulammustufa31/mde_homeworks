/**
 * generated by Xtext 2.25.0
 */
package it.disim.univaq.ecommerce.xtext.formatting2;

import com.google.inject.Inject;
import it.disim.univaq.ecommerce.xtext.services.EcommerceGrammarAccess;
import java.util.Arrays;
import model.Category;
import model.EcommerceSystem;
import model.Product;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class EcommerceFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private EcommerceGrammarAccess _ecommerceGrammarAccess;
  
  protected void _format(final EcommerceSystem ecommerceSystem, @Extension final IFormattableDocument document) {
    throw new Error("Unresolved compilation problems:"
      + "\nType mismatch: cannot convert from Customer to Iterable<?>");
  }
  
  protected void _format(final Category category, @Extension final IFormattableDocument document) {
    EList<Category> _have_sub_categories = category.getHave_sub_categories();
    for (final Category _category : _have_sub_categories) {
      document.<Category>format(_category);
    }
    EList<Product> _have_products = category.getHave_products();
    for (final Product product : _have_products) {
      document.<Product>format(product);
    }
  }
  
  public void format(final Object category, final IFormattableDocument document) {
    if (category instanceof XtextResource) {
      _format((XtextResource)category, document);
      return;
    } else if (category instanceof Category) {
      _format((Category)category, document);
      return;
    } else if (category instanceof EcommerceSystem) {
      _format((EcommerceSystem)category, document);
      return;
    } else if (category instanceof EObject) {
      _format((EObject)category, document);
      return;
    } else if (category == null) {
      _format((Void)null, document);
      return;
    } else if (category != null) {
      _format(category, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(category, document).toString());
    }
  }
}
