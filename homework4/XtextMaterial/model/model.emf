@"http://www.eclipse.org/OCL/Import"(ecore="http://www.eclipse.org/emf/2002/Ecore")
@Ecore(invocationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", settingDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot", validationDelegates="http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot")
@namespace(uri="platform:/resource/XtextMaterial/model/model.ecore", prefix="model")
package model;

class application extends Named {
	val EcommerceSystem[+] app_have_shops;
}

class EcommerceSystem extends Named {
	val Category[*] shop_have_categories;
	val Customer[*] have_clients;
	val Administrator[+] shop_have_administrators;
}

class Named {
	attr String[1] name;
}

class Category extends Named {
	attr boolean[1] active;
	attr boolean[1] root_cat;
	val Category[*] have_sub_categories;
	val Product[*] have_products;

	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(derivation="if Category.allInstances()->select(e:Category | e.have_sub_categories->includes(self))->notEmpty() then
		Category.allInstances()->select(e:Category | e.have_sub_categories->includes(self))->asSequence()->first()
		else self endif")
	volatile derived ref Category[1] parent_category;
}

class Product extends Named {
	attr boolean[1] available;
	attr int[1] stock;
	attr float[1] height;
	attr float[1] weight;
	attr float[1] price;
	attr String description;
	val ProductImage[*] product_have_images;
}

class User extends Named {
	attr String surname;
	attr String username;
	attr String password;
	attr boolean[1] active;
	attr String email;
}

class Cart extends Named {
	attr EDate date_added;
	val ItemCart[*] cart_have_items;
	val Order cart_have_order;

	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(derivation="self.cart_have_items->collect(e:ItemCart | e.total_price)->sum()")
	volatile derived attr float[1] total_price;
}

@Ecore(constraints="validStock")
@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(validStock="self.item_cart_have_product.stock >= self.quantity")
class ItemCart extends Named {
	attr int[1] quantity;
	ref Product[1] item_cart_have_product;

	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(derivation="self.item_cart_have_product->collect(p:Product | p.price)->sum() * self.quantity")
	volatile derived attr float[1] total_price;
}

class Address extends Named {
	attr String country;
	attr String state;
	attr String city;
	attr String post_code;
	attr String phone;
	attr boolean[1] active;
	attr String street_address;
}

@Ecore(constraints="validOrderStatusPaid validOrderStatusUnpaid")
@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(validOrderStatusPaid="self.order_state = OrderState::PAID implies self.order_have_shipment.shipment_status = ShipmentStatus::PENDING", validOrderStatusUnpaid="self.order_state = OrderState::UNPAID implies self.order_have_shipment.shipment_status = ShipmentStatus::PENDING")
class Order {
	attr String reference_number;
	attr EDate date_created;
	attr OrderState order_state;
	val Invoice order_has_invoice;
	val Shipment[*] order_have_shipment;
	ref Cart[1] order_for_cart;

	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(derivation="self.order_for_cart.total_price")
	volatile derived attr float[1] total_price_order;
}

class Shipment extends Named {
	attr ShipmentStatus shipment_status;
	attr EDate date;
	attr String shipment_no;
	ref Address[1] shipment_has_address;
}

enum OrderState {
	PAID = 0;
	COMMITTED = 1;
	UNPAID = 2;
}

class Invoice extends Named {
	attr int[1] invoice_id;
	attr EDate date;
	ref Order[1] invoice_for_order;

	@"http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot"(derivation="self.invoice_for_order.total_price_order")
	volatile derived attr float[1] total_price;
}

class Administrator extends User {
}

class Customer extends User {
	val Address[+] customer_have_address;
	val Cart customer_have_cart;
}

enum ShipmentStatus {
	PENDING = 0;
	TRAVELING = 1;
	DELIVERED = 2;
}

class ProductImage {
	attr String ~ref;
}

